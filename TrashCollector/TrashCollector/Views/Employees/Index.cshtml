@model IEnumerable<TrashCollector.Models.Customer>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label("day", "Day")
            <div class="col-md-0">
                @{
                    List<SelectListItem> days = new List<SelectListItem>();
                    for (int i = 0; i < 7; i++)
                    {
                        string aDayOfTheWeek = DateTime.Now.AddDays(i).DayOfWeek.ToString();
                        days.Add(new SelectListItem
                        {
                            Text = aDayOfTheWeek,
                            Value = aDayOfTheWeek
                        });
                    }

                }
                @Html.DropDownList("day", days)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-0">
                <input type="submit" value="Check" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div class="col-md-12">
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(modell => modell.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(m => m.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Zipcode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MoneyOwed)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PickupDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ExtraPickup)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SuspendServiceStart)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SuspendServiceEnd)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Zipcode)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MoneyOwed)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PickupDay)
                </td>
                <td>
                    @if (item.ExtraPickup.HasValue)
                    {
                        @Convert.ToDateTime(item.ExtraPickup).ToString("MM/dd/yyyy")
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SuspendServiceStart)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SuspendServiceEnd)
                </td>
                <td>
                    @Html.ActionLink("Details", "Details", "Customers", new { id = item.ID }, null)
                </td>
            </tr>
        }

    </table>

</div>

@if (Model.Count() > 0)
{


    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <style>
        #map {
            height: 400px;
            width: 100%;
        }
    </style>



    <div id="map"></div>
    <script>

        @*var string = "@ViewBag.geocodeCall";
        var splitstring = string.split('amp;');
        _string = splitstring[0] + splitstring[1];*@

        // Do it this way because javascript turns & into &amp; sometimes. It didn't do that for the maps API call though.
        //var geocodeAPICall = "";
        //var apiUrl = "@ViewBag.geocodeBase";
        var _address = "@ViewBag.Zipcode";
        var _key = "@ViewBag.geocodeKey";
        //geocodeAPICall = apiUrl + _address + "&key=" + _key;

        var latAndLng
        function geocode() {
            axios.get('https://maps.googleapis.com/maps/api/geocode/json', { params: { address:_address, key:_key } })
                .then((response) => {
                    latAndLng = response.data.results[0].geometry.location;
                    //console.log(latAndLng);

                    initMap();
                });
        }

        function initMap() {
            var location = {
                lat: latAndLng.lat,
                lng: latAndLng.lng
            }

            var options = {
                zoom: 12,
                center: location
            }

            var map = new google.maps.Map(document.getElementById('map'), options);

                
            @*@foreach(var customer in Model)
            {
                var _marker = new google.maps.Marker({
                    position: customer.
                })
            }*@

            @*@foreach(var customer in Model)
            {
                @("<script></script>")
            }*@

            //makeAMarker(map, location);

            @*var marker = new google.maps.Marker({
            position: location,
            map: map
            });

            var infoWindow = new google.maps.InfoWindow({
                content: '@ViewBag.Zipcode'
            });

            marker.addListener('click', function () {
                infoWindow.open(map, marker);
            });*@
        }
        function makeAMarker(map, location) {
            var marker = new google.maps.Marker({
                position: location,
                map: map
                });

                var infoWindow = new google.maps.InfoWindow({
                    content: '@ViewBag.Zipcode'
                });

                marker.addListener('click', function () {
                    infoWindow.open(map, marker);
                });
        }

            function mapFunction() {
                geocode();
            }
    </script>

    <script src="@ViewBag.mapsCall"
            async defer></script>


}


